////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// @project                    Toto|Miam
/// @file                       TotoMiam/StepperMotorCore.hpp
/// @author                     Lucas Br√©mond <lucas.bremond@gmail.com>
/// @license                    MIT License

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef __TotoMiam_StepperMotorCore__
#define __TotoMiam_StepperMotorCore__

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <SmingCore/SmingCore.h>

#include <TotoMiam/Angle.hpp>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace totomiam
{

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class StepperMotorController ;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class StepperMotorCore
{

    public:

                                StepperMotorCore                            ( ) ;

        virtual                 ~StepperMotorCore                           ( ) ;

        bool                    hasChannel                                  (           StepperMotorController&     aStepperMotorController                     ) const ;
        bool                    isChannelBusy                               (   const   StepperMotorController&     aStepperMotorController                     ) const ;

        void                    start                                       ( ) ;
        void                    stop                                        ( ) ;

        void                    addChannel                                  (           StepperMotorController&     aStepperMotorController                     ) ;
        void                    removeChannel                               (           StepperMotorController&     aStepperMotorController                     ) ;

        void                    rotate                                      (   const   Angle&                      anAngle,
                                                                                        StepperMotorController&     aStepperMotorController                     ) ;

    private:

        // struct Channel
        // {

        //     StepperMotorController* stepperMotorControllerPtr_ ;

        // } ;

        Vector<StepperMotorController*> channels_ ;

} ;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

extern StepperMotorCore         stepperMotorCore ;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#endif

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
