////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///
///	This file is part of the TotoMiam library.
///
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///	@file 						TotoMiam/TaskManager.hpp
///	@author 					Lucas Bremond <lucas@axelspace.com>
///	@date 						9 Oct 2016

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef __TotoMiam_TaskManager_HPP_INCLUDED__
#define __TotoMiam_TaskManager_HPP_INCLUDED__

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <SmingCore/SmingCore.h>

#include <TotoMiam/Task.hpp>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace TotoMiam
{

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class TaskManager
{

	public:

								TaskManager 								( ) ;

		bool					isActive									( ) const ;

		void					start										( ) ;
		void					stop										( ) ;

		bool					hasTaskWithId								(	const	uint&						aTaskId								) const ;

		const Task&				accessTaskWithId							(	const	uint&						aTaskId								) const ;

		const Vector<Task>&		accessTasks									( ) const ;

		uint					getNextTaskId								( ) const ;

		bool					addTask										(	const	Task&						aTask								) ;

		bool					addImmediateTask							( ) ;

		bool					removeTaskWithId							(	const	uint&						aTaskId								) ;

	private:

		bool					active_ ;

		Vector<Task>			tasks_ ;

		Timer					timer_ ;

		uint					taskCountLimit_ ;

		void					onManage									( ) ;

} ;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#endif

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////